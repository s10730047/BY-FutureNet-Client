/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { CdkTreeNodeToggle } from '@angular/cdk/tree';
import { Directive, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class NzTreeNodeNoopToggleDirective {
}
NzTreeNodeNoopToggleDirective.ɵfac = function NzTreeNodeNoopToggleDirective_Factory(t) { return new (t || NzTreeNodeNoopToggleDirective)(); };
NzTreeNodeNoopToggleDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NzTreeNodeNoopToggleDirective, selectors: [["nz-tree-node-toggle", "nzTreeNodeNoopToggle", ""], ["", "nzTreeNodeNoopToggle", ""]], hostAttrs: [1, "ant-tree-switcher", "ant-tree-switcher-noop"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeNoopToggleDirective, [{
        type: Directive,
        args: [{
                selector: 'nz-tree-node-toggle[nzTreeNodeNoopToggle], [nzTreeNodeNoopToggle]',
                host: {
                    class: 'ant-tree-switcher ant-tree-switcher-noop'
                }
            }]
    }], null, null); })();
export class NzTreeNodeToggleDirective extends CdkTreeNodeToggle {
    get recursive() {
        return this._recursive;
    }
    set recursive(value) {
        this._recursive = coerceBooleanProperty(value);
    }
    get isExpanded() {
        return this._treeNode.isExpanded;
    }
}
NzTreeNodeToggleDirective.ɵfac = /*@__PURE__*/ function () { let ɵNzTreeNodeToggleDirective_BaseFactory; return function NzTreeNodeToggleDirective_Factory(t) { return (ɵNzTreeNodeToggleDirective_BaseFactory || (ɵNzTreeNodeToggleDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(NzTreeNodeToggleDirective)))(t || NzTreeNodeToggleDirective); }; }();
NzTreeNodeToggleDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NzTreeNodeToggleDirective, selectors: [["nz-tree-node-toggle", 3, "nzTreeNodeNoopToggle", ""], ["", "nzTreeNodeToggle", ""]], hostAttrs: [1, "ant-tree-switcher"], hostVars: 4, hostBindings: function NzTreeNodeToggleDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("ant-tree-switcher_open", ctx.isExpanded)("ant-tree-switcher_close", !ctx.isExpanded);
    } }, inputs: { recursive: ["nzTreeNodeToggleRecursive", "recursive"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeToggle, useExisting: NzTreeNodeToggleDirective }]), ɵngcc0.ɵɵInheritDefinitionFeature] });
NzTreeNodeToggleDirective.propDecorators = {
    recursive: [{ type: Input, args: ['nzTreeNodeToggleRecursive',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeToggleDirective, [{
        type: Directive,
        args: [{
                selector: 'nz-tree-node-toggle:not([nzTreeNodeNoopToggle]), [nzTreeNodeToggle]',
                providers: [{ provide: CdkTreeNodeToggle, useExisting: NzTreeNodeToggleDirective }],
                host: {
                    class: 'ant-tree-switcher',
                    '[class.ant-tree-switcher_open]': 'isExpanded',
                    '[class.ant-tree-switcher_close]': '!isExpanded'
                }
            }]
    }], null, { recursive: [{
            type: Input,
            args: ['nzTreeNodeToggleRecursive']
        }] }); })();
export class NzTreeNodeToggleRotateIconDirective {
}
NzTreeNodeToggleRotateIconDirective.ɵfac = function NzTreeNodeToggleRotateIconDirective_Factory(t) { return new (t || NzTreeNodeToggleRotateIconDirective)(); };
NzTreeNodeToggleRotateIconDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NzTreeNodeToggleRotateIconDirective, selectors: [["", "nz-icon", "", "nzTreeNodeToggleRotateIcon", ""]], hostAttrs: [1, "ant-tree-switcher-icon"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeToggleRotateIconDirective, [{
        type: Directive,
        args: [{
                selector: '[nz-icon][nzTreeNodeToggleRotateIcon]',
                host: {
                    class: 'ant-tree-switcher-icon'
                }
            }]
    }], null, null); })();
export class NzTreeNodeToggleActiveIconDirective {
}
NzTreeNodeToggleActiveIconDirective.ɵfac = function NzTreeNodeToggleActiveIconDirective_Factory(t) { return new (t || NzTreeNodeToggleActiveIconDirective)(); };
NzTreeNodeToggleActiveIconDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NzTreeNodeToggleActiveIconDirective, selectors: [["", "nz-icon", "", "nzTreeNodeToggleActiveIcon", ""]], hostAttrs: [1, "ant-tree-switcher-loading-icon"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzTreeNodeToggleActiveIconDirective, [{
        type: Directive,
        args: [{
                selector: '[nz-icon][nzTreeNodeToggleActiveIcon]',
                host: {
                    class: 'ant-tree-switcher-loading-icon'
                }
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jb21wb25lbnRzL3RyZWUtdmlldy90b2dnbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQVNqRCxNQUFNLE9BQU8sNkJBQTZCO0FBQUc7eURBTjVDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUU7MkJBQW1FLGtCQUM3RSxJQUFJLEVBQUUsc0JBQ0osS0FBSyxFQUFFLDBDQUEwQyxrQkFDbEQsY0FDRjs7Ozs7Ozs7OzBCQUNJO0FBV0wsTUFBTSxPQUFPLHlCQUE2QixTQUFRLGlCQUFvQjtBQUN0RSxJQUNFLElBQ0ksU0FBUztBQUFLLFFBQ2hCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUMzQixJQUFFLENBQUM7QUFDSCxJQUFFLElBQUksU0FBUyxDQUFDLEtBQWM7QUFDOUIsUUFBSSxJQUFJLENBQUMsVUFBVSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25ELElBQUUsQ0FBQztBQUNILElBQ0UsSUFBSSxVQUFVO0FBQUssUUFDakIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztBQUNyQyxJQUFFLENBQUM7QUFDSDtxREF0QkMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxxRUFBcUUsa0JBQy9FLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFdBQVcsRUFBRSx5QkFBeUIsRUFBRSxDQUFDLGtCQUNuRixJQUFJLEVBQUUsc0JBQ0osS0FBSyxFQUFFLG1CQUFtQjtZQUMxQixnQ0FBZ0MsRUFBRSxZQUFZLHNCQUM5QyxpQ0FBaUMsRUFBRSxhQUFhLGtCQUNqRCxjQUNGOztrT0FDSTtBQUFDO0FBQTZDLHdCQUVoRCxLQUFLLFNBQUMsMkJBQTJCO0FBQ2hDOzs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFrQk4sTUFBTSxPQUFPLG1DQUFtQztBQUFHOytEQU5sRCxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLHVDQUF1QztLQUNqRCxJQUFJLEVBQUUsc0JBQ0osS0FBSyxFQUFFLHdCQUF3QixrQkFDaEMsY0FDRjs7Ozs7Ozs7OzBCQUNJO0FBUUwsTUFBTSxPQUFPLG1DQUFtQztBQUFHOytEQU5sRCxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLHVDQUF1QztLQUNqRCxJQUFJLEVBQUUsc0JBQ0osS0FBSyxFQUFFLGdDQUFnQyxrQkFDeEMsY0FDRjs7Ozs7Ozs7OzBCQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgQ2RrVHJlZU5vZGVUb2dnbGUgfSBmcm9tICdAYW5ndWxhci9jZGsvdHJlZSc7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCb29sZWFuSW5wdXQgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdHlwZXMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICduei10cmVlLW5vZGUtdG9nZ2xlW256VHJlZU5vZGVOb29wVG9nZ2xlXSwgW256VHJlZU5vZGVOb29wVG9nZ2xlXScsXG4gIGhvc3Q6IHtcbiAgICBjbGFzczogJ2FudC10cmVlLXN3aXRjaGVyIGFudC10cmVlLXN3aXRjaGVyLW5vb3AnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnpUcmVlTm9kZU5vb3BUb2dnbGVEaXJlY3RpdmUge31cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnbnotdHJlZS1ub2RlLXRvZ2dsZTpub3QoW256VHJlZU5vZGVOb29wVG9nZ2xlXSksIFtuelRyZWVOb2RlVG9nZ2xlXScsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogQ2RrVHJlZU5vZGVUb2dnbGUsIHVzZUV4aXN0aW5nOiBOelRyZWVOb2RlVG9nZ2xlRGlyZWN0aXZlIH1dLFxuICBob3N0OiB7XG4gICAgY2xhc3M6ICdhbnQtdHJlZS1zd2l0Y2hlcicsXG4gICAgJ1tjbGFzcy5hbnQtdHJlZS1zd2l0Y2hlcl9vcGVuXSc6ICdpc0V4cGFuZGVkJyxcbiAgICAnW2NsYXNzLmFudC10cmVlLXN3aXRjaGVyX2Nsb3NlXSc6ICchaXNFeHBhbmRlZCdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOelRyZWVOb2RlVG9nZ2xlRGlyZWN0aXZlPFQ+IGV4dGVuZHMgQ2RrVHJlZU5vZGVUb2dnbGU8VD4ge1xuICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfcmVjdXJzaXZlOiBCb29sZWFuSW5wdXQ7XG4gIEBJbnB1dCgnbnpUcmVlTm9kZVRvZ2dsZVJlY3Vyc2l2ZScpXG4gIGdldCByZWN1cnNpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY3Vyc2l2ZTtcbiAgfVxuICBzZXQgcmVjdXJzaXZlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fcmVjdXJzaXZlID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgfVxuXG4gIGdldCBpc0V4cGFuZGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl90cmVlTm9kZS5pc0V4cGFuZGVkO1xuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuei1pY29uXVtuelRyZWVOb2RlVG9nZ2xlUm90YXRlSWNvbl0nLFxuICBob3N0OiB7XG4gICAgY2xhc3M6ICdhbnQtdHJlZS1zd2l0Y2hlci1pY29uJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56VHJlZU5vZGVUb2dnbGVSb3RhdGVJY29uRGlyZWN0aXZlIHt9XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuei1pY29uXVtuelRyZWVOb2RlVG9nZ2xlQWN0aXZlSWNvbl0nLFxuICBob3N0OiB7XG4gICAgY2xhc3M6ICdhbnQtdHJlZS1zd2l0Y2hlci1sb2FkaW5nLWljb24nXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnpUcmVlTm9kZVRvZ2dsZUFjdGl2ZUljb25EaXJlY3RpdmUge31cbiJdfQ==