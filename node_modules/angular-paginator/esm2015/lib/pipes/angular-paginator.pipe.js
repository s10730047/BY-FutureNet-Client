import { Pipe } from '@angular/core';
import { AngularPaginatorService } from '../services/angular-paginator.service';
import * as i0 from "@angular/core";
import * as i1 from "../services/angular-paginator.service";
/**
 * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
 */
export class AngularPaginatorPipe {
    /**
     *
     * @param angularPaginatorService service for angular pagiantor
     */
    constructor(angularPaginatorService) {
        this.angularPaginatorService = angularPaginatorService;
    }
    /**
     * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
     *
     * @param array input array for which the manipulation happens
     * @param args input arguments for the paginator pipe
     */
    transform(array, args) {
        const instance = this.createInstance(array, args);
        // create pagination information
        this.angularPaginatorService.registerInstance(instance);
        // set the slicing range
        const start = (instance.currentPage - 1) * instance.itemsPerPage;
        const end = instance.currentPage * instance.itemsPerPage;
        return array.slice(start, end);
    }
    /**
     * create an instance for each pipe
     *
     * @param array input array for which the manipulation happens
     * @param args input arguments for the paginator pipe
     */
    createInstance(array, args) {
        return {
            id: (args === null || args === void 0 ? void 0 : args.id) ? args.id : AngularPaginatorService.id,
            currentPage: (args === null || args === void 0 ? void 0 : args.currentPage) ? args.currentPage : 1,
            itemsPerPage: (args === null || args === void 0 ? void 0 : args.itemsPerPage) ? args.itemsPerPage : 10,
            totalItems: array.length,
        };
    }
}
AngularPaginatorPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorPipe, deps: [{ token: i1.AngularPaginatorService }], target: i0.ɵɵFactoryTarget.Pipe });
AngularPaginatorPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorPipe, name: "angularPaginator" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'angularPaginator',
                }]
        }], ctorParameters: function () { return [{ type: i1.AngularPaginatorService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1wYWdpbmF0b3IucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItcGFnaW5hdG9yL3NyYy9saWIvcGlwZXMvYW5ndWxhci1wYWdpbmF0b3IucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUVwRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQzs7O0FBR2hGOztHQUVHO0FBS0gsTUFBTSxPQUFPLG9CQUFvQjtJQUMvQjs7O09BR0c7SUFDSCxZQUFvQix1QkFBZ0Q7UUFBaEQsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtJQUFJLENBQUM7SUFFekU7Ozs7O09BS0c7SUFDSCxTQUFTLENBQUksS0FBZSxFQUFFLElBQXdCO1FBQ3BELE1BQU0sUUFBUSxHQUE2QixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUU1RSxnQ0FBZ0M7UUFDaEMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXhELHdCQUF3QjtRQUN4QixNQUFNLEtBQUssR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQztRQUNqRSxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUM7UUFFekQsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxjQUFjLENBQUMsS0FBZ0IsRUFBRSxJQUF3QjtRQUN2RCxPQUFPO1lBQ0wsRUFBRSxFQUFFLENBQUEsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLEVBQUUsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUMsRUFBRTtZQUNuRCxXQUFXLEVBQUUsQ0FBQSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsV0FBVyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JELFlBQVksRUFBRSxDQUFBLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxZQUFZLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDekQsVUFBVSxFQUFFLEtBQUssQ0FBQyxNQUFNO1NBQ3pCLENBQUM7SUFDSixDQUFDOztpSEF2Q1Usb0JBQW9COytHQUFwQixvQkFBb0I7MkZBQXBCLG9CQUFvQjtrQkFKaEMsSUFBSTttQkFBQztvQkFDSixJQUFJLEVBQUUsa0JBQWtCO2lCQUN6QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQW5ndWxhclBhZ2luYXRvclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hbmd1bGFyLXBhZ2luYXRvci5zZXJ2aWNlJztcbmltcG9ydCB7IEFuZ3VsYXJQYWdpbmF0b3JJbnN0YW5jZSwgUGFnaW5hdG9yUGlwZUFyZ3MgfSBmcm9tICcuLi9vdGhlcnMvYW5ndWxhci1wYWdpbmF0b3IuaW50ZXJmYWNlJztcblxuLyoqXG4gKiBQYWdpbmF0aW9uIFBpcGUgd2hpY2ggcGFnaW5hdGVzIHRoZSBhcnJheSBmb3IgdGhlIHByb3ZpZGVkIGFyZ3VtZW50cyBzdWNoIGFzIGBpdGVtc1BlclBhZ2VgIGFuZCBgY3VycmVudFBhZ2VgXG4gKi9cbkBQaXBlKHtcbiAgbmFtZTogJ2FuZ3VsYXJQYWdpbmF0b3InLFxufSlcblxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJQYWdpbmF0b3JQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gYW5ndWxhclBhZ2luYXRvclNlcnZpY2Ugc2VydmljZSBmb3IgYW5ndWxhciBwYWdpYW50b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYW5ndWxhclBhZ2luYXRvclNlcnZpY2U6IEFuZ3VsYXJQYWdpbmF0b3JTZXJ2aWNlKSB7IH1cblxuICAvKipcbiAgICogdGhpcyBwaXBlcyBwYWdpbmF0ZXMgdGhlIGFycmF5IGZvciB0aGUgcHJvdmlkZWQgYXJndW1lbnRzIHN1Y2ggYXMgYGl0ZW1zUGVyUGFnZWAgYW5kIGBjdXJyZW50UGFnZWBcbiAgICpcbiAgICogQHBhcmFtIGFycmF5IGlucHV0IGFycmF5IGZvciB3aGljaCB0aGUgbWFuaXB1bGF0aW9uIGhhcHBlbnNcbiAgICogQHBhcmFtIGFyZ3MgaW5wdXQgYXJndW1lbnRzIGZvciB0aGUgcGFnaW5hdG9yIHBpcGVcbiAgICovXG4gIHRyYW5zZm9ybTxUPihhcnJheTogQXJyYXk8VD4sIGFyZ3M/OiBQYWdpbmF0b3JQaXBlQXJncyk6IEFycmF5PFQ+IHtcbiAgICBjb25zdCBpbnN0YW5jZTogQW5ndWxhclBhZ2luYXRvckluc3RhbmNlID0gdGhpcy5jcmVhdGVJbnN0YW5jZShhcnJheSwgYXJncyk7XG5cbiAgICAvLyBjcmVhdGUgcGFnaW5hdGlvbiBpbmZvcm1hdGlvblxuICAgIHRoaXMuYW5ndWxhclBhZ2luYXRvclNlcnZpY2UucmVnaXN0ZXJJbnN0YW5jZShpbnN0YW5jZSk7XG5cbiAgICAvLyBzZXQgdGhlIHNsaWNpbmcgcmFuZ2VcbiAgICBjb25zdCBzdGFydCA9IChpbnN0YW5jZS5jdXJyZW50UGFnZSAtIDEpICogaW5zdGFuY2UuaXRlbXNQZXJQYWdlO1xuICAgIGNvbnN0IGVuZCA9IGluc3RhbmNlLmN1cnJlbnRQYWdlICogaW5zdGFuY2UuaXRlbXNQZXJQYWdlO1xuXG4gICAgcmV0dXJuIGFycmF5LnNsaWNlKHN0YXJ0LCBlbmQpO1xuICB9XG5cbiAgLyoqXG4gICAqIGNyZWF0ZSBhbiBpbnN0YW5jZSBmb3IgZWFjaCBwaXBlXG4gICAqXG4gICAqIEBwYXJhbSBhcnJheSBpbnB1dCBhcnJheSBmb3Igd2hpY2ggdGhlIG1hbmlwdWxhdGlvbiBoYXBwZW5zXG4gICAqIEBwYXJhbSBhcmdzIGlucHV0IGFyZ3VtZW50cyBmb3IgdGhlIHBhZ2luYXRvciBwaXBlXG4gICAqL1xuICBjcmVhdGVJbnN0YW5jZShhcnJheTogdW5rbm93bltdLCBhcmdzPzogUGFnaW5hdG9yUGlwZUFyZ3MpOiBBbmd1bGFyUGFnaW5hdG9ySW5zdGFuY2Uge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogYXJncz8uaWQgPyBhcmdzLmlkIDogQW5ndWxhclBhZ2luYXRvclNlcnZpY2UuaWQsXG4gICAgICBjdXJyZW50UGFnZTogYXJncz8uY3VycmVudFBhZ2UgPyBhcmdzLmN1cnJlbnRQYWdlIDogMSxcbiAgICAgIGl0ZW1zUGVyUGFnZTogYXJncz8uaXRlbXNQZXJQYWdlID8gYXJncy5pdGVtc1BlclBhZ2UgOiAxMCxcbiAgICAgIHRvdGFsSXRlbXM6IGFycmF5Lmxlbmd0aCxcbiAgICB9O1xuICB9XG59XG4iXX0=