import { Directive, Input, Output, EventEmitter, } from '@angular/core';
import { AngularPaginatorService } from '../services/angular-paginator.service';
import * as i0 from "@angular/core";
import * as i1 from "../services/angular-paginator.service";
/**
 * This is the directive where the actual pagination takes place, it provides a sync between the
 * pipes and the pagination component
 */
export class AngularPaginatorDirective {
    /**
     *
     * @param angularPaginatorService serivce for angular paginator
     */
    constructor(angularPaginatorService) {
        this.angularPaginatorService = angularPaginatorService;
        /**
         * Use unique id when multiple paginations are being used on the same page.
         * By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`
         */
        this.id = AngularPaginatorService.id;
        /**
         * Whether to keep current page in the middle of the visible ones
         */
        this.rotate = false;
        /**
         * Whether to always display the first and last page numbers.
         * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses
         * in-between as necessary. NOTE: max-size refers to the center of the range.
         * This option may add up to 2 more numbers on each side of the displayed range for the end value and
         * what would be an ellipsis but is replaced by a number because it is sequential
         */
        this.boundaryLinkNumbers = false;
        /**
         * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses
         */
        this.forceEllipses = false;
        this.firstPage = 1;
        this.pages = [];
        /**
         * Emits an event whenever the current page is changed, It emits the current page number
         */
        this.pageChange = new EventEmitter(true);
        // subscribe to changes
        this.subscription = this.angularPaginatorService.change.subscribe((id) => {
            if (id === this.id) {
                this.updatePages();
            }
        });
    }
    /**
     * Navigate to prevoius page
     */
    toPreviousPage() {
        if (this.currentPage > this.firstPage) {
            this.setPage(this.currentPage - 1);
        }
    }
    /**
     * Navigate to next page
     */
    toNextPage() {
        if (this.currentPage < this.lastPage) {
            this.setPage(this.currentPage + 1);
        }
    }
    /**
     * Navigate to first page
     */
    toFirstPage() {
        this.setPage(this.firstPage);
    }
    /**
     * Navigate to last page
     */
    toLastPage() {
        this.setPage(this.lastPage);
    }
    /**
     * Sets current page
     *
     * @param page page number to set as currentPage
     */
    setCurrentPage(page) {
        this.setPage(page);
    }
    /**
     *
     * @param page  page number to set
     */
    setPage(page) {
        if (page && this.currentPage !== page) {
            this.currentPage = page;
            this.pageChange.emit(page);
        }
    }
    /**
     * create page object used for template
     *
     * @param pageNumber page number
     * @param text page number, text to be displayed
     * @param isActive whether the page is active or not, true for currentPage
     */
    makePage(pageNumber, text, isActive) {
        return {
            number: pageNumber,
            text,
            active: isActive,
        };
    }
    /**
     *  create page array
     *
     * @param currentPage current page number
     * @param itemsPerPage total items per page
     * @param totalItems no of items for pagination, usually array length
     */
    getPages(currentPage, itemsPerPage, totalItems) {
        const pages = [];
        // Default page limits
        const totalPages = this.lastPage = Math.ceil(totalItems / itemsPerPage);
        let startPage = 1;
        let endPage = totalPages;
        const isMaxSized = this.maxSize ? this.maxSize < totalPages : false;
        // recompute if maxSize
        if (isMaxSized && this.maxSize) {
            if (this.rotate) {
                // current page is displayed in the middle of the visible ones
                startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);
                endPage = startPage + this.maxSize - 1;
                // Adjust if limit is exceeded
                if (endPage > totalPages) {
                    endPage = totalPages;
                    startPage = endPage - this.maxSize + 1;
                }
            }
            else {
                // Visible pages are paginated with maxSize
                startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;
                // adjust last page if limit is exceeded
                endPage = Math.min(startPage + this.maxSize - 1, totalPages);
            }
        }
        // add page number links
        for (let pageNumber = startPage; pageNumber <= endPage; pageNumber++) {
            const page = this.makePage(pageNumber, pageNumber.toString(), pageNumber === currentPage);
            pages.push(page);
        }
        // add links to move between page sets
        if (isMaxSized && (this.maxSize && this.maxSize > 0) && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {
            if (startPage > 1) {
                // need ellipsis for all options unless range is too close to beginning
                if (!this.boundaryLinkNumbers || startPage > 3) {
                    const previousPageSet = this.makePage(startPage - 1, '...', false);
                    pages.unshift(previousPageSet);
                }
                if (this.boundaryLinkNumbers) {
                    if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential
                        const secondPageLink = this.makePage(2, '2', false);
                        pages.unshift(secondPageLink);
                    }
                    // add the first page
                    const firstPageLink = this.makePage(1, '1', false);
                    pages.unshift(firstPageLink);
                }
            }
            if (endPage < totalPages) {
                // need ellipsis for all options unless range is too close to end
                if (!this.boundaryLinkNumbers || endPage < totalPages - 2) {
                    const nextPageSet = this.makePage(endPage + 1, '...', false);
                    pages.push(nextPageSet);
                }
                if (this.boundaryLinkNumbers) {
                    // need to replace ellipsis when the buttons would be sequential
                    if (endPage === totalPages - 2) {
                        const secondToLastPageLink = this.makePage(totalPages - 1, (totalPages - 1).toString(), false);
                        pages.push(secondToLastPageLink);
                    }
                    // add the last page
                    const lastPageLink = this.makePage(totalPages, totalPages.toString(), false);
                    pages.push(lastPageLink);
                }
            }
        }
        return pages;
    }
    /**
     * Updates the pagination component
     */
    updatePages() {
        const instance = this.angularPaginatorService.getInstance(this.id);
        const correctedCurrentPage = this.outOfBoundCorrection(instance);
        if (correctedCurrentPage !== instance.currentPage || this.currentPage !== instance.currentPage) {
            this.setPage(correctedCurrentPage);
        }
        this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);
    }
    /**
     * Check if currentPage is out of bound with totalPages
     *
     * @param instance instance for which the range is to be corrected
     */
    outOfBoundCorrection(instance) {
        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);
        if (totalPages < instance.currentPage && totalPages > 0) {
            return totalPages;
        }
        else if (instance.currentPage < 1) {
            return 1;
        }
        return instance.currentPage;
    }
    /**
     * check if there is any instance registered with the id
     */
    isValidId() {
        if (!this.angularPaginatorService.getInstance(this.id)) {
            throw new Error(`There is no instance registered with id \`${this.id}\``);
        }
    }
    ngOnInit() {
        this.isValidId();
        this.updatePages();
    }
    ngOnDestroy() {
        /** destroy the subscription when the directive is destroyed */
        this.subscription.unsubscribe();
    }
}
AngularPaginatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorDirective, deps: [{ token: i1.AngularPaginatorService }], target: i0.ɵɵFactoryTarget.Directive });
AngularPaginatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.1", type: AngularPaginatorDirective, selector: "angularPaginator, [angularPaginator]", inputs: { id: "id", maxSize: "maxSize", rotate: "rotate", boundaryLinkNumbers: "boundaryLinkNumbers", forceEllipses: "forceEllipses" }, outputs: { pageChange: "pageChange" }, exportAs: ["angularPaginator"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'angularPaginator, [angularPaginator]',
                    exportAs: 'angularPaginator',
                }]
        }], ctorParameters: function () { return [{ type: i1.AngularPaginatorService }]; }, propDecorators: { id: [{
                type: Input
            }], maxSize: [{
                type: Input
            }], rotate: [{
                type: Input
            }], boundaryLinkNumbers: [{
                type: Input
            }], forceEllipses: [{
                type: Input
            }], pageChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,