import { Injectable, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
export class AngularPaginatorService {
    constructor() {
        /** instances is the collection of pagination componetns */
        this.instances = {};
        /** emits an event with instance id whenever the page number changes */
        this.change = new EventEmitter();
    }
    /**
     * creates an instance for every pipe differentiated with id
     *
     * @param instance each instance refers to a unique pagination component
     */
    registerInstance(instance) {
        if (!this.instances[instance.id]) {
            this.instances[instance.id] = instance;
            this.change.emit(instance.id);
        }
        else {
            const changed = this.updateInstance(instance);
            if (changed) {
                this.change.emit(instance.id);
            }
        }
    }
    /**
     * updates existing pagination instances available
     * and returns true if value has changed
     *
     * @param instance an unique pagination component
     */
    updateInstance(instance) {
        for (const key in instance) {
            const v1 = instance[key];
            const v2 = this.instances[instance.id][key];
            if (v1 !== v2) {
                Object.assign(this.instances[instance.id], instance);
                return true;
            }
        }
        return false;
    }
    /**
     * return instance with given id
     *
     * @param id unique id of the pagination component
     */
    getInstance(id) {
        return this.instances[id];
    }
    /**
     * return currentPage for given id
     *
     * @param id unique id of the pagination component
     */
    getCurrentPage(id) {
        return this.instances[id].currentPage;
    }
}
/** id is used to identify pagination instances */
AngularPaginatorService.id = 'ANGULAR_PAGINATOR_DEFAULT';
AngularPaginatorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
AngularPaginatorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1wYWdpbmF0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItcGFnaW5hdG9yL3NyYy9saWIvc2VydmljZXMvYW5ndWxhci1wYWdpbmF0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFLekQsTUFBTSxPQUFPLHVCQUF1QjtJQURwQztRQUtFLDJEQUEyRDtRQUMzRCxjQUFTLEdBQTZDLEVBQUUsQ0FBQztRQUV6RCx1RUFBdUU7UUFDdkUsV0FBTSxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO0tBd0QzRDtJQXREQzs7OztPQUlHO0lBQ0gsZ0JBQWdCLENBQUMsUUFBa0M7UUFDakQsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQztZQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDL0I7YUFBTTtZQUNMLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDOUMsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQy9CO1NBQ0Y7SUFDSCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxjQUFjLENBQUMsUUFBa0M7UUFDL0MsS0FBSyxNQUFNLEdBQUcsSUFBSSxRQUFRLEVBQUU7WUFDMUIsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLEdBQXFDLENBQUMsQ0FBQTtZQUMxRCxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFxQyxDQUFDLENBQUE7WUFFN0UsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO2dCQUNiLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUE7Z0JBQ3BELE9BQU8sSUFBSSxDQUFDO2FBQ2I7U0FDRjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxXQUFXLENBQUMsRUFBVTtRQUNwQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxjQUFjLENBQUMsRUFBVTtRQUN2QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDO0lBQ3hDLENBQUM7O0FBOURELGtEQUFrRDtBQUMzQywwQkFBRSxHQUFHLDJCQUEyQixDQUFDO29IQUY3Qix1QkFBdUI7d0hBQXZCLHVCQUF1QjsyRkFBdkIsdUJBQXVCO2tCQURuQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEFuZ3VsYXJQYWdpbmF0b3JJbnN0YW5jZSB9IGZyb20gJy4uL290aGVycy9hbmd1bGFyLXBhZ2luYXRvci5pbnRlcmZhY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQW5ndWxhclBhZ2luYXRvclNlcnZpY2Uge1xuICAvKiogaWQgaXMgdXNlZCB0byBpZGVudGlmeSBwYWdpbmF0aW9uIGluc3RhbmNlcyAqL1xuICBzdGF0aWMgaWQgPSAnQU5HVUxBUl9QQUdJTkFUT1JfREVGQVVMVCc7XG5cbiAgLyoqIGluc3RhbmNlcyBpcyB0aGUgY29sbGVjdGlvbiBvZiBwYWdpbmF0aW9uIGNvbXBvbmV0bnMgKi9cbiAgaW5zdGFuY2VzOiBSZWNvcmQ8c3RyaW5nLCBBbmd1bGFyUGFnaW5hdG9ySW5zdGFuY2U+ID0ge307XG5cbiAgLyoqIGVtaXRzIGFuIGV2ZW50IHdpdGggaW5zdGFuY2UgaWQgd2hlbmV2ZXIgdGhlIHBhZ2UgbnVtYmVyIGNoYW5nZXMgKi9cbiAgY2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIC8qKlxuICAgKiBjcmVhdGVzIGFuIGluc3RhbmNlIGZvciBldmVyeSBwaXBlIGRpZmZlcmVudGlhdGVkIHdpdGggaWRcbiAgICpcbiAgICogQHBhcmFtIGluc3RhbmNlIGVhY2ggaW5zdGFuY2UgcmVmZXJzIHRvIGEgdW5pcXVlIHBhZ2luYXRpb24gY29tcG9uZW50XG4gICAqL1xuICByZWdpc3Rlckluc3RhbmNlKGluc3RhbmNlOiBBbmd1bGFyUGFnaW5hdG9ySW5zdGFuY2UpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaW5zdGFuY2VzW2luc3RhbmNlLmlkXSkge1xuICAgICAgdGhpcy5pbnN0YW5jZXNbaW5zdGFuY2UuaWRdID0gaW5zdGFuY2U7XG4gICAgICB0aGlzLmNoYW5nZS5lbWl0KGluc3RhbmNlLmlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY2hhbmdlZCA9IHRoaXMudXBkYXRlSW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2UuZW1pdChpbnN0YW5jZS5pZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHVwZGF0ZXMgZXhpc3RpbmcgcGFnaW5hdGlvbiBpbnN0YW5jZXMgYXZhaWxhYmxlXG4gICAqIGFuZCByZXR1cm5zIHRydWUgaWYgdmFsdWUgaGFzIGNoYW5nZWRcbiAgICpcbiAgICogQHBhcmFtIGluc3RhbmNlIGFuIHVuaXF1ZSBwYWdpbmF0aW9uIGNvbXBvbmVudFxuICAgKi9cbiAgdXBkYXRlSW5zdGFuY2UoaW5zdGFuY2U6IEFuZ3VsYXJQYWdpbmF0b3JJbnN0YW5jZSk6IGJvb2xlYW4ge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGluc3RhbmNlKSB7XG4gICAgICBjb25zdCB2MSA9IGluc3RhbmNlW2tleSBhcyBrZXlvZiBBbmd1bGFyUGFnaW5hdG9ySW5zdGFuY2VdXG4gICAgICBjb25zdCB2MiA9IHRoaXMuaW5zdGFuY2VzW2luc3RhbmNlLmlkXVtrZXkgYXMga2V5b2YgQW5ndWxhclBhZ2luYXRvckluc3RhbmNlXVxuXG4gICAgICBpZiAodjEgIT09IHYyKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5pbnN0YW5jZXNbaW5zdGFuY2UuaWRdLCBpbnN0YW5jZSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIHJldHVybiBpbnN0YW5jZSB3aXRoIGdpdmVuIGlkXG4gICAqXG4gICAqIEBwYXJhbSBpZCB1bmlxdWUgaWQgb2YgdGhlIHBhZ2luYXRpb24gY29tcG9uZW50XG4gICAqL1xuICBnZXRJbnN0YW5jZShpZDogc3RyaW5nKTogQW5ndWxhclBhZ2luYXRvckluc3RhbmNlIHtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZXNbaWRdO1xuICB9XG5cbiAgLyoqXG4gICAqIHJldHVybiBjdXJyZW50UGFnZSBmb3IgZ2l2ZW4gaWRcbiAgICpcbiAgICogQHBhcmFtIGlkIHVuaXF1ZSBpZCBvZiB0aGUgcGFnaW5hdGlvbiBjb21wb25lbnRcbiAgICovXG4gIGdldEN1cnJlbnRQYWdlKGlkOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlc1tpZF0uY3VycmVudFBhZ2U7XG4gIH1cbn1cbiJdfQ==