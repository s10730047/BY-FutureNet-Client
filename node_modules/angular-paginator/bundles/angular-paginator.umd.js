(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular-paginator', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['angular-paginator'] = {}, global.ng.core, global.ng.common));
}(this, (function (exports, i0, common) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var AngularPaginatorService = /** @class */ (function () {
        function AngularPaginatorService() {
            /** instances is the collection of pagination componetns */
            this.instances = {};
            /** emits an event with instance id whenever the page number changes */
            this.change = new i0.EventEmitter();
        }
        /**
         * creates an instance for every pipe differentiated with id
         *
         * @param instance each instance refers to a unique pagination component
         */
        AngularPaginatorService.prototype.registerInstance = function (instance) {
            if (!this.instances[instance.id]) {
                this.instances[instance.id] = instance;
                this.change.emit(instance.id);
            }
            else {
                var changed = this.updateInstance(instance);
                if (changed) {
                    this.change.emit(instance.id);
                }
            }
        };
        /**
         * updates existing pagination instances available
         * and returns true if value has changed
         *
         * @param instance an unique pagination component
         */
        AngularPaginatorService.prototype.updateInstance = function (instance) {
            for (var key in instance) {
                var v1 = instance[key];
                var v2 = this.instances[instance.id][key];
                if (v1 !== v2) {
                    Object.assign(this.instances[instance.id], instance);
                    return true;
                }
            }
            return false;
        };
        /**
         * return instance with given id
         *
         * @param id unique id of the pagination component
         */
        AngularPaginatorService.prototype.getInstance = function (id) {
            return this.instances[id];
        };
        /**
         * return currentPage for given id
         *
         * @param id unique id of the pagination component
         */
        AngularPaginatorService.prototype.getCurrentPage = function (id) {
            return this.instances[id].currentPage;
        };
        return AngularPaginatorService;
    }());
    /** id is used to identify pagination instances */
    AngularPaginatorService.id = 'ANGULAR_PAGINATOR_DEFAULT';
    AngularPaginatorService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0__namespace, type: AngularPaginatorService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AngularPaginatorService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0__namespace, type: AngularPaginatorService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0__namespace, type: AngularPaginatorService, decorators: [{
                type: i0.Injectable
            }] });

    /**
     * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
     */
    var AngularPaginatorPipe = /** @class */ (function () {
        /**
         *
         * @param angularPaginatorService service for angular pagiantor
         */
        function AngularPaginatorPipe(angularPaginatorService) {
            this.angularPaginatorService = angularPaginatorService;
        }
        /**
         * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
         *
         * @param array input array for which the manipulation happens
         * @param args input arguments for the paginator pipe
         */
        AngularPaginatorPipe.prototype.transform = function (array, args) {
            var instance = this.createInstance(array, args);
            // create pagination information
            this.angularPaginatorService.registerInstance(instance);
            // set the slicing range
            var start = (instance.currentPage - 1) * instance.itemsPerPage;
            var end = instance.currentPage * instance.itemsPerPage;
            return array.slice(start, end);
        };
        /**
         * create an instance for each pipe
         *
         * @param array input array for which the manipulation happens
         * @param args input arguments for the paginator pipe
         */
        AngularPaginatorPipe.prototype.createInstance = function (array, args) {
            return {
                id: (args === null || args === void 0 ? void 0 : args.id) ? args.id : AngularPaginatorService.id,
                currentPage: (args === null || args === void 0 ? void 0 : args.currentPage) ? args.currentPage : 1,
                itemsPerPage: (args === null || args === void 0 ? void 0 : args.itemsPerPage) ? args.itemsPerPage : 10,
                totalItems: array.length,
            };
        };
        return AngularPaginatorPipe;
    }());
    AngularPaginatorPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0__namespace, type: AngularPaginatorPipe, deps: [{ token: AngularPaginatorService }], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    AngularPaginatorPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0__namespace, type: AngularPaginatorPipe, name: "angularPaginator" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0__namespace, type: AngularPaginatorPipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'angularPaginator',
                    }]
            }], ctorParameters: function () { return [{ type: AngularPaginatorService }]; } });

    /**
     * This is the directive where the actual pagination takes place, it provides a sync between the
     * pipes and the pagination component
     */
    var AngularPaginatorDirective = /** @class */ (function () {
        /**
         *
         * @param angularPaginatorService serivce for angular paginator
         */
        function AngularPaginatorDirective(angularPaginatorService) {
            var _this = this;
            this.angularPaginatorService = angularPaginatorService;
            /**
             * Use unique id when multiple paginations are being used on the same page.
             * By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`
             */
            this.id = AngularPaginatorService.id;
            /**
             * Whether to keep current page in the middle of the visible ones
             */
            this.rotate = false;
            /**
             * Whether to always display the first and last page numbers.
             * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses
             * in-between as necessary. NOTE: max-size refers to the center of the range.
             * This option may add up to 2 more numbers on each side of the displayed range for the end value and
             * what would be an ellipsis but is replaced by a number because it is sequential
             */
            this.boundaryLinkNumbers = false;
            /**
             * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses
             */
            this.forceEllipses = false;
            this.firstPage = 1;
            this.pages = [];
            /**
             * Emits an event whenever the current page is changed, It emits the current page number
             */
            this.pageChange = new i0.EventEmitter(true);
            // subscribe to changes
            this.subscription = this.angularPaginatorService.change.subscribe(function (id) {
                if (id === _this.id) {
                    _this.updatePages();
                }
            });
        }
        /**
         * Navigate to prevoius page
         */
        AngularPaginatorDirective.prototype.toPreviousPage = function () {
            if (this.currentPage > this.firstPage) {
                this.setPage(this.currentPage - 1);
            }
        };
        /**
         * Navigate to next page
         */
        AngularPaginatorDirective.prototype.toNextPage = function () {
            if (this.currentPage < this.lastPage) {
                this.setPage(this.currentPage + 1);
            }
        };
        /**
         * Navigate to first page
         */
        AngularPaginatorDirective.prototype.toFirstPage = function () {
            this.setPage(this.firstPage);
        };
        /**
         * Navigate to last page
         */
        AngularPaginatorDirective.prototype.toLastPage = function () {
            this.setPage(this.lastPage);
        };
        /**
         * Sets current page
         *
         * @param page page number to set as currentPage
         */
        AngularPaginatorDirective.prototype.setCurrentPage = function (page) {
            this.setPage(page);
        };
        /**
         *
         * @param page  page number to set
         */
        AngularPaginatorDirective.prototype.setPage = function (page) {
            if (page && this.currentPage !== page) {
                this.currentPage = page;
                this.pageChange.emit(page);
            }
        };
        /**
         * create page object used for template
         *
         * @param pageNumber page number
         * @param text page number, text to be displayed
         * @param isActive whether the page is active or not, true for currentPage
         */
        AngularPaginatorDirective.prototype.makePage = function (pageNumber, text, isActive) {
            return {
                number: pageNumber,
                text: text,
                active: isActive,
            };
        };
        /**
         *  create page array
         *
         * @param currentPage current page number
         * @param itemsPerPage total items per page
         * @param totalItems no of items for pagination, usually array length
         */
        AngularPaginatorDirective.prototype.getPages = function (currentPage, itemsPerPage, totalItems) {
            var pages = [];
            // Default page limits
            var totalPages = this.lastPage = Math.ceil(totalItems / itemsPerPage);
            var startPage = 1;
            var endPage = totalPages;
            var isMaxSized = this.maxSize ? this.maxSize < totalPages : false;
            // recompute if maxSize
            if (isMaxSized && this.maxSize) {
                if (this.rotate) {
                    // current page is displayed in the middle of the visible ones
                    startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);
                    endPage = startPage + this.maxSize - 1;
                    // Adjust if limit is exceeded
                    if (endPage > totalPages) {
                        endPage = totalPages;
                        startPage = endPage - this.maxSize + 1;
                    }
                }
                else {
                    // Visible pages are paginated with maxSize
                    startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;
                    // adjust last page if limit is exceeded
                    endPage = Math.min(startPage + this.maxSize - 1, totalPages);
                }
            }
            // add page number links
            for (var pageNumber = startPage; pageNumber <= endPage; pageNumber++) {
                var page = this.makePage(pageNumber, pageNumber.toString(), pageNumber === currentPage);
                pages.push(page);
            }
            // add links to move between page sets
            if (isMaxSized && (this.maxSize && this.maxSize > 0) && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {
                if (startPage > 1) {
                    // need ellipsis for all options unless range is too close to beginning
                    if (!this.boundaryLinkNumbers || startPage > 3) {
                        var previousPageSet = this.makePage(startPage - 1, '...', false);
                        pages.unshift(previousPageSet);
                    }
                    if (this.boundaryLinkNumbers) {
                        if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential
                            var secondPageLink = this.makePage(2, '2', false);
                            pages.unshift(secondPageLink);
                        }
                        // add the first page
                        var firstPageLink = this.makePage(1, '1', false);
                        pages.unshift(firstPageLink);
                    }
                }
                if (endPage < totalPages) {
                    // need ellipsis for all options unless range is too close to end
                    if (!this.boundaryLinkNumbers || endPage < totalPages - 2) {
                        var nextPageSet = this.makePage(endPage + 1, '...', false);
                        pages.push(nextPageSet);
                    }
                    if (this.boundaryLinkNumbers) {
                        // need to replace ellipsis when the buttons would be sequential
                        if (endPage === totalPages - 2) {
                            var secondToLastPageLink = this.makePage(totalPages - 1, (totalPages - 1).toString(), false);
                            pages.push(secondToLastPageLink);
                        }
                        // add the last page
                        var lastPageLink = this.makePage(totalPages, totalPages.toString(), false);
                        pages.push(lastPageLink);
                    }
                }
            }
            return pages;
        };
        /**
         * Updates the pagination component
         */
        AngularPaginatorDirective.prototype.updatePages = function () {
            var instance = this.angularPaginatorService.getInstance(this.id);
            var correctedCurrentPage = this.outOfBoundCorrection(instance);
            if (correctedCurrentPage !== instance.currentPage || this.currentPage !== instance.currentPage) {
                this.setPage(correctedCurrentPage);
            }
            this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);
        };
        /**
         * Check if currentPage is out of bound with totalPages
         *
         * @param instance instance for which the range is to be corrected
         */
        AngularPaginatorDirective.prototype.outOfBoundCorrection = function (instance) {
            var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);
            if (totalPages < instance.currentPage && totalPages > 0) {
                return totalPages;
            }
            else if (instance.currentPage < 1) {
                return 1;
            }
            return instance.currentPage;
        };
        /**
         * check if there is any instance registered with the id
         */
        AngularPaginatorDirective.prototype.isValidId = function () {
            if (!this.angularPaginatorService.getInstance(this.id)) {
                throw new Error("There is no instance registered with id `" + this.id + "`");
            }
        };
        AngularPaginatorDirective.prototype.ngOnInit = function () {
            this.isValidId();
            this.updatePages();
        };
        AngularPaginatorDirective.prototype.ngOnDestroy = function () {
            /** destroy the subscription when the directive is destroyed */
            this.subscription.unsubscribe();
        };
        return AngularPaginatorDirective;
    }());
    AngularPaginatorDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0__namespace, type: AngularPaginatorDirective, deps: [{ token: AngularPaginatorService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    AngularPaginatorDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.1", type: AngularPaginatorDirective, selector: "angularPaginator, [angularPaginator]", inputs: { id: "id", maxSize: "maxSize", rotate: "rotate", boundaryLinkNumbers: "boundaryLinkNumbers", forceEllipses: "forceEllipses" }, outputs: { pageChange: "pageChange" }, exportAs: ["angularPaginator"], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0__namespace, type: AngularPaginatorDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: 'angularPaginator, [angularPaginator]',
                        exportAs: 'angularPaginator',
                    }]
            }], ctorParameters: function () { return [{ type: AngularPaginatorService }]; }, propDecorators: { id: [{
                    type: i0.Input
                }], maxSize: [{
                    type: i0.Input
                }], rotate: [{
                    type: i0.Input
                }], boundaryLinkNumbers: [{
                    type: i0.Input
                }], forceEllipses: [{
                    type: i0.Input
                }], pageChange: [{
                    type: i0.Output
                }] } });

    var AngularPaginatorModule = /** @class */ (function () {
        function AngularPaginatorModule() {
        }
        return AngularPaginatorModule;
    }());
    AngularPaginatorModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0__namespace, type: AngularPaginatorModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AngularPaginatorModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0__namespace, type: AngularPaginatorModule, declarations: [AngularPaginatorPipe, AngularPaginatorDirective], imports: [common.CommonModule], exports: [AngularPaginatorDirective, AngularPaginatorPipe] });
    AngularPaginatorModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0__namespace, type: AngularPaginatorModule, providers: [AngularPaginatorService], imports: [[common.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0__namespace, type: AngularPaginatorModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule],
                        providers: [AngularPaginatorService],
                        declarations: [AngularPaginatorPipe, AngularPaginatorDirective],
                        exports: [AngularPaginatorDirective, AngularPaginatorPipe],
                    }]
            }] });

    /*
     * Public API Surface of angular-paginator
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AngularPaginatorDirective = AngularPaginatorDirective;
    exports.AngularPaginatorModule = AngularPaginatorModule;
    exports.AngularPaginatorPipe = AngularPaginatorPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-paginator.umd.js.map
