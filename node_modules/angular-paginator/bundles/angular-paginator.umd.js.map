{"version":3,"file":"angular-paginator.umd.js","sources":["../../../projects/angular-paginator/src/lib/services/angular-paginator.service.ts","../../../projects/angular-paginator/src/lib/pipes/angular-paginator.pipe.ts","../../../projects/angular-paginator/src/lib/directives/angular-paginator.directive.ts","../../../projects/angular-paginator/src/lib/angular-paginator.module.ts","../../../projects/angular-paginator/src/public-api.ts","../../../projects/angular-paginator/src/angular-paginator.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\n\nimport { AngularPaginatorInstance } from '../others/angular-paginator.interface';\n\n@Injectable()\nexport class AngularPaginatorService {\n  /** id is used to identify pagination instances */\n  static id = 'ANGULAR_PAGINATOR_DEFAULT';\n\n  /** instances is the collection of pagination componetns */\n  instances: Record<string, AngularPaginatorInstance> = {};\n\n  /** emits an event with instance id whenever the page number changes */\n  change: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * creates an instance for every pipe differentiated with id\n   *\n   * @param instance each instance refers to a unique pagination component\n   */\n  registerInstance(instance: AngularPaginatorInstance): void {\n    if (!this.instances[instance.id]) {\n      this.instances[instance.id] = instance;\n      this.change.emit(instance.id);\n    } else {\n      const changed = this.updateInstance(instance);\n      if (changed) {\n        this.change.emit(instance.id);\n      }\n    }\n  }\n\n  /**\n   * updates existing pagination instances available\n   * and returns true if value has changed\n   *\n   * @param instance an unique pagination component\n   */\n  updateInstance(instance: AngularPaginatorInstance): boolean {\n    for (const key in instance) {\n      const v1 = instance[key as keyof AngularPaginatorInstance]\n      const v2 = this.instances[instance.id][key as keyof AngularPaginatorInstance]\n\n      if (v1 !== v2) {\n        Object.assign(this.instances[instance.id], instance)\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * return instance with given id\n   *\n   * @param id unique id of the pagination component\n   */\n  getInstance(id: string): AngularPaginatorInstance {\n    return this.instances[id];\n  }\n\n  /**\n   * return currentPage for given id\n   *\n   * @param id unique id of the pagination component\n   */\n  getCurrentPage(id: string): number {\n    return this.instances[id].currentPage;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\nimport { AngularPaginatorInstance, PaginatorPipeArgs } from '../others/angular-paginator.interface';\n\n/**\n * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\n */\n@Pipe({\n  name: 'angularPaginator',\n})\n\nexport class AngularPaginatorPipe implements PipeTransform {\n  /**\n   *\n   * @param angularPaginatorService service for angular pagiantor\n   */\n  constructor(private angularPaginatorService: AngularPaginatorService) { }\n\n  /**\n   * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\n   *\n   * @param array input array for which the manipulation happens\n   * @param args input arguments for the paginator pipe\n   */\n  transform<T>(array: Array<T>, args?: PaginatorPipeArgs): Array<T> {\n    const instance: AngularPaginatorInstance = this.createInstance(array, args);\n\n    // create pagination information\n    this.angularPaginatorService.registerInstance(instance);\n\n    // set the slicing range\n    const start = (instance.currentPage - 1) * instance.itemsPerPage;\n    const end = instance.currentPage * instance.itemsPerPage;\n\n    return array.slice(start, end);\n  }\n\n  /**\n   * create an instance for each pipe\n   *\n   * @param array input array for which the manipulation happens\n   * @param args input arguments for the paginator pipe\n   */\n  createInstance(array: unknown[], args?: PaginatorPipeArgs): AngularPaginatorInstance {\n    return {\n      id: args?.id ? args.id : AngularPaginatorService.id,\n      currentPage: args?.currentPage ? args.currentPage : 1,\n      itemsPerPage: args?.itemsPerPage ? args.itemsPerPage : 10,\n      totalItems: array.length,\n    };\n  }\n}\n","import {\n  Directive, OnInit, OnDestroy, Input, Output, EventEmitter,\n} from '@angular/core';\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\nimport { AngularPaginatorInstance, Page } from '../others/angular-paginator.interface';\nimport { Subscription } from 'rxjs';\n\n/**\n * This is the directive where the actual pagination takes place, it provides a sync between the\n * pipes and the pagination component\n */\n@Directive({\n  selector: 'angularPaginator, [angularPaginator]',\n  exportAs: 'angularPaginator',\n})\n\nexport class AngularPaginatorDirective implements OnInit, OnDestroy {\n  /**\n   * Use unique id when multiple paginations are being used on the same page.\n   * By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`\n   */\n  @Input() id: string = AngularPaginatorService.id;\n\n  /**\n   * Limit number for pagination size, i.e., the maximum page numbers to be displayed\n   */\n  @Input() maxSize?: number;\n\n  /**\n   * Whether to keep current page in the middle of the visible ones\n   */\n  @Input() rotate = false;\n\n  /**\n   * Whether to always display the first and last page numbers.\n   * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses\n   * in-between as necessary. NOTE: max-size refers to the center of the range.\n   * This option may add up to 2 more numbers on each side of the displayed range for the end value and\n   * what would be an ellipsis but is replaced by a number because it is sequential\n   */\n  @Input() boundaryLinkNumbers = false;\n\n  /**\n   * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses\n   */\n  @Input() forceEllipses = false;\n\n  currentPage!: number;\n  firstPage = 1;\n  lastPage!: number;\n  pages: Page[] = [];\n\n  private subscription: Subscription;\n\n  /**\n   * Emits an event whenever the current page is changed, It emits the current page number\n   */\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>(true);\n\n  /**\n   *\n   * @param angularPaginatorService serivce for angular paginator\n   */\n  constructor(private angularPaginatorService: AngularPaginatorService) {\n    // subscribe to changes\n    this.subscription = this.angularPaginatorService.change.subscribe((id: string) => {\n      if (id === this.id) {\n        this.updatePages();\n      }\n    });\n  }\n\n  /**\n   * Navigate to prevoius page\n   */\n  toPreviousPage(): void {\n    if (this.currentPage > this.firstPage) {\n      this.setPage(this.currentPage - 1);\n    }\n  }\n\n  /**\n   * Navigate to next page\n   */\n  toNextPage(): void {\n    if (this.currentPage < this.lastPage) {\n      this.setPage(this.currentPage + 1);\n    }\n  }\n\n  /**\n   * Navigate to first page\n   */\n  toFirstPage(): void {\n    this.setPage(this.firstPage);\n  }\n\n  /**\n   * Navigate to last page\n   */\n  toLastPage(): void {\n    this.setPage(this.lastPage);\n  }\n\n  /**\n   * Sets current page\n   *\n   * @param page page number to set as currentPage\n   */\n  setCurrentPage(page: number): void {\n    this.setPage(page);\n  }\n\n  /**\n   *\n   * @param page  page number to set\n   */\n  private setPage(page: number): void {\n    if (page && this.currentPage !== page) {\n      this.currentPage = page;\n      this.pageChange.emit(page);\n    }\n  }\n\n  /**\n   * create page object used for template\n   *\n   * @param pageNumber page number\n   * @param text page number, text to be displayed\n   * @param isActive whether the page is active or not, true for currentPage\n   */\n  private makePage(pageNumber: number, text: string, isActive: boolean): Page {\n    return {\n      number: pageNumber,\n      text,\n      active: isActive,\n    };\n  }\n\n  /**\n   *  create page array\n   *\n   * @param currentPage current page number\n   * @param itemsPerPage total items per page\n   * @param totalItems no of items for pagination, usually array length\n   */\n  private getPages(currentPage: number, itemsPerPage: number, totalItems: number): Page[] {\n    const pages: Page[] = [];\n\n    // Default page limits\n    const totalPages: number = this.lastPage = Math.ceil(totalItems / itemsPerPage);\n\n    let startPage = 1;\n    let endPage: number = totalPages;\n    const isMaxSized: boolean = this.maxSize ? this.maxSize < totalPages : false;\n\n    // recompute if maxSize\n    if (isMaxSized && this.maxSize) {\n      if (this.rotate) {\n        // current page is displayed in the middle of the visible ones\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n        endPage = startPage + this.maxSize - 1;\n\n        // Adjust if limit is exceeded\n        if (endPage > totalPages) {\n          endPage = totalPages;\n          startPage = endPage - this.maxSize + 1;\n        }\n      } else {\n        // Visible pages are paginated with maxSize\n        startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\n\n        // adjust last page if limit is exceeded\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n      }\n    }\n\n    // add page number links\n    for (let pageNumber = startPage; pageNumber <= endPage; pageNumber++) {\n      const page = this.makePage(pageNumber, pageNumber.toString(), pageNumber === currentPage);\n      pages.push(page);\n    }\n\n    // add links to move between page sets\n    if (isMaxSized && (this.maxSize && this.maxSize > 0) && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {\n      if (startPage > 1) {\n        // need ellipsis for all options unless range is too close to beginning\n        if (!this.boundaryLinkNumbers || startPage > 3) {\n          const previousPageSet = this.makePage(startPage - 1, '...', false);\n          pages.unshift(previousPageSet);\n        }\n\n        if (this.boundaryLinkNumbers) {\n          if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential\n            const secondPageLink = this.makePage(2, '2', false);\n            pages.unshift(secondPageLink);\n          }\n\n          // add the first page\n          const firstPageLink = this.makePage(1, '1', false);\n          pages.unshift(firstPageLink);\n        }\n      }\n\n      if (endPage < totalPages) {\n        // need ellipsis for all options unless range is too close to end\n        if (!this.boundaryLinkNumbers || endPage < totalPages - 2) {\n          const nextPageSet = this.makePage(endPage + 1, '...', false);\n          pages.push(nextPageSet);\n        }\n\n        if (this.boundaryLinkNumbers) {\n          // need to replace ellipsis when the buttons would be sequential\n          if (endPage === totalPages - 2) {\n            const secondToLastPageLink = this.makePage(totalPages - 1, (totalPages - 1).toString(), false);\n            pages.push(secondToLastPageLink);\n          }\n\n          // add the last page\n          const lastPageLink = this.makePage(totalPages, totalPages.toString(), false);\n          pages.push(lastPageLink);\n        }\n      }\n    }\n    return pages;\n  }\n\n  /**\n   * Updates the pagination component\n   */\n  private updatePages(): void {\n    const instance: AngularPaginatorInstance = this.angularPaginatorService.getInstance(this.id);\n\n    const correctedCurrentPage = this.outOfBoundCorrection(instance);\n\n    if (correctedCurrentPage !== instance.currentPage || this.currentPage !== instance.currentPage) {\n      this.setPage(correctedCurrentPage);\n    }\n\n    this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);\n  }\n\n  /**\n   * Check if currentPage is out of bound with totalPages\n   *\n   * @param instance instance for which the range is to be corrected\n   */\n  private outOfBoundCorrection(instance: AngularPaginatorInstance): number {\n    const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\n\n    if (totalPages < instance.currentPage && totalPages > 0) {\n      return totalPages;\n    } else if (instance.currentPage < 1) {\n      return 1;\n    }\n\n    return instance.currentPage;\n  }\n\n  /**\n   * check if there is any instance registered with the id\n   */\n  isValidId(): void {\n    if (!this.angularPaginatorService.getInstance(this.id)) {\n      throw new Error(`There is no instance registered with id \\`${this.id}\\``);\n    }\n  }\n\n  ngOnInit(): void {\n    this.isValidId();\n    this.updatePages();\n  }\n\n  ngOnDestroy(): void {\n    /** destroy the subscription when the directive is destroyed */\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AngularPaginatorPipe } from './pipes/angular-paginator.pipe';\nimport { AngularPaginatorDirective } from './directives/angular-paginator.directive';\nimport { AngularPaginatorService } from './services/angular-paginator.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [AngularPaginatorService],\n  declarations: [AngularPaginatorPipe, AngularPaginatorDirective],\n  exports: [AngularPaginatorDirective, AngularPaginatorPipe],\n})\n\nexport class AngularPaginatorModule { }\n","/*\n * Public API Surface of angular-paginator\n */\n\nexport * from './lib/angular-paginator.module';\nexport * from './lib/pipes/angular-paginator.pipe';\nexport * from './lib/directives/angular-paginator.directive';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["EventEmitter","Injectable","Pipe","Directive","Input","Output","CommonModule","NgModule"],"mappings":"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"}