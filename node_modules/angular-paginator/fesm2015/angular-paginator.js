import * as i0 from '@angular/core';
import { EventEmitter, Injectable, Pipe, Directive, Input, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

class AngularPaginatorService {
    constructor() {
        /** instances is the collection of pagination componetns */
        this.instances = {};
        /** emits an event with instance id whenever the page number changes */
        this.change = new EventEmitter();
    }
    /**
     * creates an instance for every pipe differentiated with id
     *
     * @param instance each instance refers to a unique pagination component
     */
    registerInstance(instance) {
        if (!this.instances[instance.id]) {
            this.instances[instance.id] = instance;
            this.change.emit(instance.id);
        }
        else {
            const changed = this.updateInstance(instance);
            if (changed) {
                this.change.emit(instance.id);
            }
        }
    }
    /**
     * updates existing pagination instances available
     * and returns true if value has changed
     *
     * @param instance an unique pagination component
     */
    updateInstance(instance) {
        for (const key in instance) {
            const v1 = instance[key];
            const v2 = this.instances[instance.id][key];
            if (v1 !== v2) {
                Object.assign(this.instances[instance.id], instance);
                return true;
            }
        }
        return false;
    }
    /**
     * return instance with given id
     *
     * @param id unique id of the pagination component
     */
    getInstance(id) {
        return this.instances[id];
    }
    /**
     * return currentPage for given id
     *
     * @param id unique id of the pagination component
     */
    getCurrentPage(id) {
        return this.instances[id].currentPage;
    }
}
/** id is used to identify pagination instances */
AngularPaginatorService.id = 'ANGULAR_PAGINATOR_DEFAULT';
AngularPaginatorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
AngularPaginatorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorService, decorators: [{
            type: Injectable
        }] });

/**
 * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
 */
class AngularPaginatorPipe {
    /**
     *
     * @param angularPaginatorService service for angular pagiantor
     */
    constructor(angularPaginatorService) {
        this.angularPaginatorService = angularPaginatorService;
    }
    /**
     * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
     *
     * @param array input array for which the manipulation happens
     * @param args input arguments for the paginator pipe
     */
    transform(array, args) {
        const instance = this.createInstance(array, args);
        // create pagination information
        this.angularPaginatorService.registerInstance(instance);
        // set the slicing range
        const start = (instance.currentPage - 1) * instance.itemsPerPage;
        const end = instance.currentPage * instance.itemsPerPage;
        return array.slice(start, end);
    }
    /**
     * create an instance for each pipe
     *
     * @param array input array for which the manipulation happens
     * @param args input arguments for the paginator pipe
     */
    createInstance(array, args) {
        return {
            id: (args === null || args === void 0 ? void 0 : args.id) ? args.id : AngularPaginatorService.id,
            currentPage: (args === null || args === void 0 ? void 0 : args.currentPage) ? args.currentPage : 1,
            itemsPerPage: (args === null || args === void 0 ? void 0 : args.itemsPerPage) ? args.itemsPerPage : 10,
            totalItems: array.length,
        };
    }
}
AngularPaginatorPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorPipe, deps: [{ token: AngularPaginatorService }], target: i0.ɵɵFactoryTarget.Pipe });
AngularPaginatorPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorPipe, name: "angularPaginator" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'angularPaginator',
                }]
        }], ctorParameters: function () { return [{ type: AngularPaginatorService }]; } });

/**
 * This is the directive where the actual pagination takes place, it provides a sync between the
 * pipes and the pagination component
 */
class AngularPaginatorDirective {
    /**
     *
     * @param angularPaginatorService serivce for angular paginator
     */
    constructor(angularPaginatorService) {
        this.angularPaginatorService = angularPaginatorService;
        /**
         * Use unique id when multiple paginations are being used on the same page.
         * By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`
         */
        this.id = AngularPaginatorService.id;
        /**
         * Whether to keep current page in the middle of the visible ones
         */
        this.rotate = false;
        /**
         * Whether to always display the first and last page numbers.
         * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses
         * in-between as necessary. NOTE: max-size refers to the center of the range.
         * This option may add up to 2 more numbers on each side of the displayed range for the end value and
         * what would be an ellipsis but is replaced by a number because it is sequential
         */
        this.boundaryLinkNumbers = false;
        /**
         * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses
         */
        this.forceEllipses = false;
        this.firstPage = 1;
        this.pages = [];
        /**
         * Emits an event whenever the current page is changed, It emits the current page number
         */
        this.pageChange = new EventEmitter(true);
        // subscribe to changes
        this.subscription = this.angularPaginatorService.change.subscribe((id) => {
            if (id === this.id) {
                this.updatePages();
            }
        });
    }
    /**
     * Navigate to prevoius page
     */
    toPreviousPage() {
        if (this.currentPage > this.firstPage) {
            this.setPage(this.currentPage - 1);
        }
    }
    /**
     * Navigate to next page
     */
    toNextPage() {
        if (this.currentPage < this.lastPage) {
            this.setPage(this.currentPage + 1);
        }
    }
    /**
     * Navigate to first page
     */
    toFirstPage() {
        this.setPage(this.firstPage);
    }
    /**
     * Navigate to last page
     */
    toLastPage() {
        this.setPage(this.lastPage);
    }
    /**
     * Sets current page
     *
     * @param page page number to set as currentPage
     */
    setCurrentPage(page) {
        this.setPage(page);
    }
    /**
     *
     * @param page  page number to set
     */
    setPage(page) {
        if (page && this.currentPage !== page) {
            this.currentPage = page;
            this.pageChange.emit(page);
        }
    }
    /**
     * create page object used for template
     *
     * @param pageNumber page number
     * @param text page number, text to be displayed
     * @param isActive whether the page is active or not, true for currentPage
     */
    makePage(pageNumber, text, isActive) {
        return {
            number: pageNumber,
            text,
            active: isActive,
        };
    }
    /**
     *  create page array
     *
     * @param currentPage current page number
     * @param itemsPerPage total items per page
     * @param totalItems no of items for pagination, usually array length
     */
    getPages(currentPage, itemsPerPage, totalItems) {
        const pages = [];
        // Default page limits
        const totalPages = this.lastPage = Math.ceil(totalItems / itemsPerPage);
        let startPage = 1;
        let endPage = totalPages;
        const isMaxSized = this.maxSize ? this.maxSize < totalPages : false;
        // recompute if maxSize
        if (isMaxSized && this.maxSize) {
            if (this.rotate) {
                // current page is displayed in the middle of the visible ones
                startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);
                endPage = startPage + this.maxSize - 1;
                // Adjust if limit is exceeded
                if (endPage > totalPages) {
                    endPage = totalPages;
                    startPage = endPage - this.maxSize + 1;
                }
            }
            else {
                // Visible pages are paginated with maxSize
                startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;
                // adjust last page if limit is exceeded
                endPage = Math.min(startPage + this.maxSize - 1, totalPages);
            }
        }
        // add page number links
        for (let pageNumber = startPage; pageNumber <= endPage; pageNumber++) {
            const page = this.makePage(pageNumber, pageNumber.toString(), pageNumber === currentPage);
            pages.push(page);
        }
        // add links to move between page sets
        if (isMaxSized && (this.maxSize && this.maxSize > 0) && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {
            if (startPage > 1) {
                // need ellipsis for all options unless range is too close to beginning
                if (!this.boundaryLinkNumbers || startPage > 3) {
                    const previousPageSet = this.makePage(startPage - 1, '...', false);
                    pages.unshift(previousPageSet);
                }
                if (this.boundaryLinkNumbers) {
                    if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential
                        const secondPageLink = this.makePage(2, '2', false);
                        pages.unshift(secondPageLink);
                    }
                    // add the first page
                    const firstPageLink = this.makePage(1, '1', false);
                    pages.unshift(firstPageLink);
                }
            }
            if (endPage < totalPages) {
                // need ellipsis for all options unless range is too close to end
                if (!this.boundaryLinkNumbers || endPage < totalPages - 2) {
                    const nextPageSet = this.makePage(endPage + 1, '...', false);
                    pages.push(nextPageSet);
                }
                if (this.boundaryLinkNumbers) {
                    // need to replace ellipsis when the buttons would be sequential
                    if (endPage === totalPages - 2) {
                        const secondToLastPageLink = this.makePage(totalPages - 1, (totalPages - 1).toString(), false);
                        pages.push(secondToLastPageLink);
                    }
                    // add the last page
                    const lastPageLink = this.makePage(totalPages, totalPages.toString(), false);
                    pages.push(lastPageLink);
                }
            }
        }
        return pages;
    }
    /**
     * Updates the pagination component
     */
    updatePages() {
        const instance = this.angularPaginatorService.getInstance(this.id);
        const correctedCurrentPage = this.outOfBoundCorrection(instance);
        if (correctedCurrentPage !== instance.currentPage || this.currentPage !== instance.currentPage) {
            this.setPage(correctedCurrentPage);
        }
        this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);
    }
    /**
     * Check if currentPage is out of bound with totalPages
     *
     * @param instance instance for which the range is to be corrected
     */
    outOfBoundCorrection(instance) {
        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);
        if (totalPages < instance.currentPage && totalPages > 0) {
            return totalPages;
        }
        else if (instance.currentPage < 1) {
            return 1;
        }
        return instance.currentPage;
    }
    /**
     * check if there is any instance registered with the id
     */
    isValidId() {
        if (!this.angularPaginatorService.getInstance(this.id)) {
            throw new Error(`There is no instance registered with id \`${this.id}\``);
        }
    }
    ngOnInit() {
        this.isValidId();
        this.updatePages();
    }
    ngOnDestroy() {
        /** destroy the subscription when the directive is destroyed */
        this.subscription.unsubscribe();
    }
}
AngularPaginatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorDirective, deps: [{ token: AngularPaginatorService }], target: i0.ɵɵFactoryTarget.Directive });
AngularPaginatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.1", type: AngularPaginatorDirective, selector: "angularPaginator, [angularPaginator]", inputs: { id: "id", maxSize: "maxSize", rotate: "rotate", boundaryLinkNumbers: "boundaryLinkNumbers", forceEllipses: "forceEllipses" }, outputs: { pageChange: "pageChange" }, exportAs: ["angularPaginator"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'angularPaginator, [angularPaginator]',
                    exportAs: 'angularPaginator',
                }]
        }], ctorParameters: function () { return [{ type: AngularPaginatorService }]; }, propDecorators: { id: [{
                type: Input
            }], maxSize: [{
                type: Input
            }], rotate: [{
                type: Input
            }], boundaryLinkNumbers: [{
                type: Input
            }], forceEllipses: [{
                type: Input
            }], pageChange: [{
                type: Output
            }] } });

class AngularPaginatorModule {
}
AngularPaginatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AngularPaginatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorModule, declarations: [AngularPaginatorPipe, AngularPaginatorDirective], imports: [CommonModule], exports: [AngularPaginatorDirective, AngularPaginatorPipe] });
AngularPaginatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorModule, providers: [AngularPaginatorService], imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.1", ngImport: i0, type: AngularPaginatorModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    providers: [AngularPaginatorService],
                    declarations: [AngularPaginatorPipe, AngularPaginatorDirective],
                    exports: [AngularPaginatorDirective, AngularPaginatorPipe],
                }]
        }] });

/*
 * Public API Surface of angular-paginator
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AngularPaginatorDirective, AngularPaginatorModule, AngularPaginatorPipe };
//# sourceMappingURL=angular-paginator.js.map
