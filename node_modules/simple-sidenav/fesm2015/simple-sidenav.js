import { trigger, style, animate, transition, keyframes, stagger, query, state } from '@angular/animations';
import { Component, Input, ViewEncapsulation, Output, EventEmitter, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function SimpleSidenavComponent_div_0_div_1_img_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "img", 9);
} if (rf & 2) {
    const item_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("src", item_r2.icon, ɵngcc0.ɵɵsanitizeUrl);
} }
function SimpleSidenavComponent_div_0_div_1_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 10);
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(1, "svg", 11);
    ɵngcc0.ɵɵelement(2, "path", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("@rotate", item_r2.id === ctx_r5.activeOne.id && ctx_r5.activeOne.menu ? "rotated" : "default");
} }
const _c0 = function (a0) { return { "active": a0 }; };
function SimpleSidenavComponent_div_0_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵlistener("click", function SimpleSidenavComponent_div_0_div_1_Template_div_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9); const item_r2 = restoredCtx.$implicit; const menuIndex_r3 = restoredCtx.index; const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.onNavClick(item_r2, menuIndex_r3); });
    ɵngcc0.ɵɵtemplate(2, SimpleSidenavComponent_div_0_div_1_img_2_Template, 1, 1, "img", 5);
    ɵngcc0.ɵɵelementStart(3, "span", 6);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, SimpleSidenavComponent_div_0_div_1_span_5_Template, 3, 1, "span", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "sm-simple-sidenav", 8);
    ɵngcc0.ɵɵlistener("onSidenav", function SimpleSidenavComponent_div_0_div_1_Template_sm_simple_sidenav_onSidenav_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.onSidenav.emit($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(10, _c0, item_r2.id === ctx_r1.activeOne.id));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r2.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(item_r2.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.withArrow && item_r2.menu);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("animate", true)("activeID", ctx_r1.activeID)("animation", ctx_r1.animation)("menu", ctx_r1.activeOne.menu)("withArrow", ctx_r1.withArrow)("show", item_r2.id === ctx_r1.activeOne.id && item_r2.menu);
} }
function SimpleSidenavComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵtemplate(1, SimpleSidenavComponent_div_0_div_1_Template, 7, 12, "div", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("@fadeIn", ctx_r0.animate && ctx_r0.animation && ctx_r0.animation.in)("@close", ctx_r0.animate && ctx_r0.animation && ctx_r0.animation.out);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.menu);
} }
const fadeIn = trigger('fadeIn', [
    transition('void => slide-in-stagger', [
        query(':enter', style({
            transform: 'translateX(-100%)',
            opacity: 0,
            height: 0,
            width: 0
        }), { optional: true }),
        query(':enter', stagger(55, [animate("{{ duration }}ms", keyframes([
                style({ transform: 'translateX(-100%)', opacity: 0, height: 0, width: 0 }),
                style({ transform: 'translateX(5%)', opacity: 0.5, height: '*' }),
                style({ transform: 'translateX(-3%)', opacity: 0.6, height: '*' }),
                style({ transform: 'translateX(2%)', opacity: 0.7, height: '*', width: '100%' }),
                style({ transform: 'translateX(0)', opacity: 1, height: '*', width: '100%' })
            ]))]), { optional: true })
    ], { params: { duration: 500 } }),
    transition('* => slide-in', [
        query(':self', style({ height: 0 }), { optional: true }),
        query(':self', animate("{{ duration }}ms", style({ height: '*' })), { optional: true })
    ], { params: { duration: 300 } })
]);
/** @type {?} */
const fadeOut = trigger('close', [
    transition('slide-out => void', [animate("{{ duration }}ms", style({ height: 0 }))], { params: { duration: 200 } })
]);
/** @type {?} */
const rotate = trigger('rotate', [
    state('default', style({ transform: 'translate(0, -50%) rotate(0)' })),
    state('rotated', style({ transform: 'translate(0, -50%) rotate(90deg)' })),
    transition('default <=> rotated', [animate('100ms')])
]);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SimpleSidenavComponent {
    constructor() {
        this.menu = [];
        this.show = true;
        this.animate = false;
        this.withArrow = true;
        this.onSidenav = new EventEmitter();
        this.activeOne = {};
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.activeOne = {};
        if (changes.activeID && changes.activeID.currentValue) {
            this.activeID = changes.activeID.currentValue;
            this.activeID && this.menu && this.findActive();
        }
    }
    /**
     * @param {?} __0
     * @param {?} index
     * @return {?}
     */
    onNavClick({ id, name, icon }, index) {
        if (this.activeOne.id === id && this.activeOne.menu) {
            this.activeOne = {};
            this.onSidenav.emit(null);
            return;
        }
        this.onSidenav.emit({ id, name, icon, index });
        this.activeOne = { id, name, icon };
        if (this.menu[index].menu) {
            this.activeOne.menu = this.menu[index].menu;
        }
    }
    /**
     * @return {?}
     */
    findActive() {
        this.menu.forEach((item) => {
            if (item.id === this.activeID || this.hasActive(item.menu)) {
                this.activeOne = item;
                return;
            }
        });
    }
    /**
     * @param {?} menu
     * @return {?}
     */
    hasActive(menu) {
        return menu && menu.some(item => item.id === this.activeID || this.hasActive(item.menu));
    }
}
SimpleSidenavComponent.ɵfac = function SimpleSidenavComponent_Factory(t) { return new (t || SimpleSidenavComponent)(); };
SimpleSidenavComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SimpleSidenavComponent, selectors: [["sm-simple-sidenav"]], inputs: { menu: "menu", show: "show", animate: "animate", withArrow: "withArrow", activeID: "activeID", animation: "animation" }, outputs: { onSidenav: "onSidenav" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["class", "simple-sidenav", 4, "ngIf"], [1, "simple-sidenav"], ["class", "simple-sidenav__item", 4, "ngFor", "ngForOf"], [1, "simple-sidenav__item"], [1, "simple-sidenav__item-content", 3, "ngClass", "click"], ["class", "simple-sidenav__icon", "alt", "icon", 3, "src", 4, "ngIf"], [1, "simple-sidenav__text"], ["class", "simple-sidenav__arrow", 4, "ngIf"], [1, "simple-sidenav-submenu", 3, "animate", "activeID", "animation", "menu", "withArrow", "show", "onSidenav"], ["alt", "icon", 1, "simple-sidenav__icon", 3, "src"], [1, "simple-sidenav__arrow"], ["focusable", "false", "viewBox", "0 0 24 24", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"]], template: function SimpleSidenavComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, SimpleSidenavComponent_div_0_Template, 2, 3, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.show && ctx.menu && ctx.menu.length > 0);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf, ɵngcc1.NgClass, SimpleSidenavComponent], styles: [".simple-sidenav{max-width:360px;overflow:hidden}.simple-sidenav__item{margin-top:3px;overflow:hidden}.simple-sidenav__item-content{position:relative;display:flex;justify-content:flex-start;align-items:center;background-color:#d6d6d6;padding:5px 15px;border-radius:4px}.simple-sidenav__item-content:hover{cursor:pointer}.simple-sidenav__icon{height:35px;margin-right:8px}.simple-sidenav__text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.simple-sidenav__arrow{position:absolute;width:30px;height:30px;right:12px;top:50%;-webkit-transform:translate(0,-50%);transform:translate(0,-50%)}.simple-sidenav .active{background-color:#b9b9b9}.simple-sidenav-submenu .simple-sidenav{padding-left:15px}"], encapsulation: 2, data: { animation: [fadeIn, fadeOut, rotate] } });
SimpleSidenavComponent.propDecorators = {
    menu: [{ type: Input }],
    show: [{ type: Input }],
    animation: [{ type: Input }],
    animate: [{ type: Input }],
    withArrow: [{ type: Input }],
    activeID: [{ type: Input }],
    onSidenav: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSidenavComponent, [{
        type: Component,
        args: [{
                selector: 'sm-simple-sidenav',
                template: "<div class=\"simple-sidenav\"\n  *ngIf=\"show && menu && menu.length > 0\"\n  [@fadeIn]=\"animate && animation && animation.in\"\n  [@close]=\"animate && animation && animation.out\">\n  <div class=\"simple-sidenav__item\" *ngFor=\"let item of menu; let menuIndex = index\">\n    <div class=\"simple-sidenav__item-content\" (click)=\"onNavClick(item, menuIndex)\" [ngClass]=\"{'active': item.id === activeOne.id}\">\n      <img class=\"simple-sidenav__icon\" [src]=\"item.icon\" alt=\"icon\" *ngIf=\"item.icon\">\n      <span class=\"simple-sidenav__text\">{{ item.name }}</span>\n      <span class=\"simple-sidenav__arrow\"\n        *ngIf=\"withArrow && item.menu\"\n        [@rotate]=\"item.id === activeOne.id && activeOne.menu ? 'rotated' : 'default'\">\n        <svg focusable=\"false\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z\"></path></svg>\n      </span>\n    </div>\n    <sm-simple-sidenav\n      class=\"simple-sidenav-submenu\"\n      [animate]=\"true\"\n      [activeID]=\"activeID\"\n      [animation]=\"animation\"\n      [menu]=\"activeOne.menu\"\n      (onSidenav)=\"onSidenav.emit($event)\"\n      [withArrow]=\"withArrow\"\n      [show]=\"item.id === activeOne.id && item.menu\">\n    </sm-simple-sidenav>\n  </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                animations: [fadeIn, fadeOut, rotate],
                styles: [".simple-sidenav{max-width:360px;overflow:hidden}.simple-sidenav__item{margin-top:3px;overflow:hidden}.simple-sidenav__item-content{position:relative;display:flex;justify-content:flex-start;align-items:center;background-color:#d6d6d6;padding:5px 15px;border-radius:4px}.simple-sidenav__item-content:hover{cursor:pointer}.simple-sidenav__icon{height:35px;margin-right:8px}.simple-sidenav__text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.simple-sidenav__arrow{position:absolute;width:30px;height:30px;right:12px;top:50%;-webkit-transform:translate(0,-50%);transform:translate(0,-50%)}.simple-sidenav .active{background-color:#b9b9b9}.simple-sidenav-submenu .simple-sidenav{padding-left:15px}"]
            }]
    }], function () { return []; }, { menu: [{
            type: Input
        }], show: [{
            type: Input
        }], animate: [{
            type: Input
        }], withArrow: [{
            type: Input
        }], onSidenav: [{
            type: Output
        }], activeID: [{
            type: Input
        }], animation: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SimpleSidenavModule {
}
SimpleSidenavModule.ɵfac = function SimpleSidenavModule_Factory(t) { return new (t || SimpleSidenavModule)(); };
SimpleSidenavModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SimpleSidenavModule });
SimpleSidenavModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSidenavModule, [{
        type: NgModule,
        args: [{
                declarations: [SimpleSidenavComponent],
                imports: [
                    CommonModule
                ],
                exports: [SimpleSidenavComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SimpleSidenavModule, { declarations: function () { return [SimpleSidenavComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [SimpleSidenavComponent]; } }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { SimpleSidenavComponent, SimpleSidenavModule, fadeIn as ɵa, fadeOut as ɵb, rotate as ɵc };

//# sourceMappingURL=simple-sidenav.js.map