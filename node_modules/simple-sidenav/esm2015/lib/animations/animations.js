/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { trigger, style, animate, transition, keyframes, stagger, query, state } from '@angular/animations';
/** @type {?} */
const fadeIn = trigger('fadeIn', [
    transition('void => slide-in-stagger', [
        query(':enter', style({
            transform: 'translateX(-100%)',
            opacity: 0,
            height: 0,
            width: 0
        }), { optional: true }),
        query(':enter', stagger(55, [animate("{{ duration }}ms", keyframes([
                style({ transform: 'translateX(-100%)', opacity: 0, height: 0, width: 0 }),
                style({ transform: 'translateX(5%)', opacity: 0.5, height: '*' }),
                style({ transform: 'translateX(-3%)', opacity: 0.6, height: '*' }),
                style({ transform: 'translateX(2%)', opacity: 0.7, height: '*', width: '100%' }),
                style({ transform: 'translateX(0)', opacity: 1, height: '*', width: '100%' })
            ]))]), { optional: true })
    ], { params: { duration: 500 } }),
    transition('* => slide-in', [
        query(':self', style({ height: 0 }), { optional: true }),
        query(':self', animate("{{ duration }}ms", style({ height: '*' })), { optional: true })
    ], { params: { duration: 300 } })
]);
/** @type {?} */
const fadeOut = trigger('close', [
    transition('slide-out => void', [animate("{{ duration }}ms", style({ height: 0 }))], { params: { duration: 200 } })
]);
/** @type {?} */
const rotate = trigger('rotate', [
    state('default', style({ transform: 'translate(0, -50%) rotate(0)' })),
    state('rotated', style({ transform: 'translate(0, -50%) rotate(90deg)' })),
    transition('default <=> rotated', [animate('100ms')])
]);
export { fadeIn, fadeOut, rotate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3NpbXBsZS1zaWRlbmF2LyIsInNvdXJjZXMiOlsibGliL2FuaW1hdGlvbnMvYW5pbWF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLE9BQU8sRUFDUCxLQUFLLEVBQ0wsT0FBTyxFQUNQLFVBQVUsRUFDVixTQUFTLEVBQ1QsT0FBTyxFQUNQLEtBQUssRUFDTCxLQUFLLEVBQ04sTUFBTSxxQkFBcUIsQ0FBQzs7TUFFdkIsTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUU7SUFDL0IsVUFBVSxDQUFDLDBCQUEwQixFQUFFO1FBQ3JDLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDO1lBQ3BCLFNBQVMsRUFBRSxtQkFBbUI7WUFDOUIsT0FBTyxFQUFFLENBQUM7WUFDVixNQUFNLEVBQUUsQ0FBQztZQUNULEtBQUssRUFBRSxDQUFDO1NBQ1QsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ3ZCLEtBQUssQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxTQUFTLENBQUM7Z0JBQ2pFLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUMxRSxLQUFLLENBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUM7Z0JBQ2pFLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDbEUsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUM7Z0JBQ2hGLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQzthQUM5RSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7S0FDM0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQ2pDLFVBQVUsQ0FBQyxlQUFlLEVBQUU7UUFDMUIsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUN4RCxLQUFLLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDO0tBQ3hGLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztDQUNsQyxDQUFDOztNQUVJLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFO0lBQy9CLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztDQUNwSCxDQUFDOztNQUVJLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFO0lBQy9CLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLDhCQUE4QixFQUFFLENBQUMsQ0FBQztJQUN0RSxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxrQ0FBa0MsRUFBRSxDQUFDLENBQUM7SUFDMUUsVUFBVSxDQUFDLHFCQUFxQixFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Q0FDdEQsQ0FBQztBQUVGLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgdHJpZ2dlcixcbiAgc3R5bGUsXG4gIGFuaW1hdGUsXG4gIHRyYW5zaXRpb24sXG4gIGtleWZyYW1lcyxcbiAgc3RhZ2dlcixcbiAgcXVlcnksXG4gIHN0YXRlXG59IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5jb25zdCBmYWRlSW4gPSB0cmlnZ2VyKCdmYWRlSW4nLCBbXG4gIHRyYW5zaXRpb24oJ3ZvaWQgPT4gc2xpZGUtaW4tc3RhZ2dlcicsIFtcbiAgICBxdWVyeSgnOmVudGVyJywgc3R5bGUoe1xuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtMTAwJSknLFxuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIGhlaWdodDogMCxcbiAgICAgIHdpZHRoOiAwXG4gICAgfSksIHsgb3B0aW9uYWw6IHRydWUgfSksXG4gICAgcXVlcnkoJzplbnRlcicsIHN0YWdnZXIoNTUsIFthbmltYXRlKFwie3sgZHVyYXRpb24gfX1tc1wiLCBrZXlmcmFtZXMoW1xuICAgICAgc3R5bGUoeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC0xMDAlKScsIG9wYWNpdHk6IDAsIGhlaWdodDogMCwgd2lkdGg6IDAgfSksXG4gICAgICBzdHlsZSh7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoNSUpJywgb3BhY2l0eTogMC41LCBoZWlnaHQ6ICcqJyB9KSxcbiAgICAgIHN0eWxlKHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtMyUpJywgb3BhY2l0eTogMC42LCBoZWlnaHQ6ICcqJyB9KSxcbiAgICAgIHN0eWxlKHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgyJSknLCBvcGFjaXR5OiAwLjcsIGhlaWdodDogJyonLCB3aWR0aDogJzEwMCUnIH0pLFxuICAgICAgc3R5bGUoeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDApJywgb3BhY2l0eTogMSwgaGVpZ2h0OiAnKicsIHdpZHRoOiAnMTAwJScgfSlcbiAgICBdKSldKSwgeyBvcHRpb25hbDogdHJ1ZSB9KVxuICBdLCB7IHBhcmFtczogeyBkdXJhdGlvbjogNTAwIH0gfSksXG4gIHRyYW5zaXRpb24oJyogPT4gc2xpZGUtaW4nLCBbXG4gICAgcXVlcnkoJzpzZWxmJywgc3R5bGUoeyBoZWlnaHQ6IDAgfSksIHsgb3B0aW9uYWw6IHRydWUgfSksXG4gICAgcXVlcnkoJzpzZWxmJywgYW5pbWF0ZShcInt7IGR1cmF0aW9uIH19bXNcIiwgc3R5bGUoeyBoZWlnaHQ6ICcqJyB9KSksIHsgb3B0aW9uYWw6IHRydWUgfSlcbiAgXSwgeyBwYXJhbXM6IHsgZHVyYXRpb246IDMwMCB9IH0pXG5dKTtcblxuY29uc3QgZmFkZU91dCA9IHRyaWdnZXIoJ2Nsb3NlJywgW1xuICB0cmFuc2l0aW9uKCdzbGlkZS1vdXQgPT4gdm9pZCcsIFthbmltYXRlKFwie3sgZHVyYXRpb24gfX1tc1wiLCBzdHlsZSh7IGhlaWdodDogMCB9KSldLCB7IHBhcmFtczogeyBkdXJhdGlvbjogMjAwIH0gfSlcbl0pO1xuXG5jb25zdCByb3RhdGUgPSB0cmlnZ2VyKCdyb3RhdGUnLCBbXG4gIHN0YXRlKCdkZWZhdWx0Jywgc3R5bGUoeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMCwgLTUwJSkgcm90YXRlKDApJyB9KSksXG4gIHN0YXRlKCdyb3RhdGVkJywgc3R5bGUoeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMCwgLTUwJSkgcm90YXRlKDkwZGVnKScgfSkpLFxuICB0cmFuc2l0aW9uKCdkZWZhdWx0IDw9PiByb3RhdGVkJywgW2FuaW1hdGUoJzEwMG1zJyldKVxuXSlcblxuZXhwb3J0IHsgZmFkZUluLCBmYWRlT3V0LCByb3RhdGUgfTtcbiJdfQ==